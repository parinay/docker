#create docker group "if" exists
sudo groupadd docker

#Manage User as non-root user might need to log-out/log-in back
#for group membership to be in effect
sudo usermod -aG docker $USER

docker version
docker info

#to search an image name
docker search hello-world

#pull and run image locally
docker pull hello-world
docker run hello-world
docker ps -a
docker rm $(docker ps -aq)
docker run hello-world

#start docker on boot
sudo systemctl enable docker

#restart docker service
sudo systemctl restart docker.service
sudo service docker restart

#Kernel compatibility
curl https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh > check-config.sh
bash ./check-config.sh

#Docker host to which your client is configured to connect to
# if unset Docker client is set to connect to Docker Daemon running on localhost
# else value, Docker client is set to connec to Docker damemon running on that host
env | grep DOCKER_HOST

#start a Apache Web Server docker run with additional cmd options
# -p hostPort:containerPort
# -name container name
# -d detached mode.
docker run -p 80:80 --name web -d httpd

stop and remove a running container
docker stop web
docker rm web

#storage - adding storage to container
docker run -p 80:80 --name web -d -v $PWD/htdocs:/usr/local/apache2/htdocs httpd

#Access the container - attaches our terminal to shell of containers in an
#interactive mode
docker exec -it web /bin/bash

#force terminate the container
docker rm -f web

#commit changes to your container
docker commit web doweb

#list images
docker image

#login to hub.docker.com
docker login

#tag and store images in Docker hub
docker login
docker tag web parinay/doweb
docker push parinay/doweb

#Launching a Private registry
#Docker Registry is available as a container that can be launched like any other container. Since the registry holds multiple images, it’s a good idea to attach a storage volume to it.
docker run -d -p 5000:5000 --restart=always --name registry -v $PWD/registry:/var/lib/registry registry
docker pull busybox
docker tag busybox localhost:5000/busybox
#Push to local docker registry
docker push localhost:5000/busybox

#remove one or more docker images
docker rmi -f localhost:5000/busybox

#pull from local registry
docker pull localhost:5000/busybox

#docker build Dockerfile
# -t tage name
docker build -t sammy/todo-web .
#Successfully built cad80a530202
#Successfully tagged sammy/todo-web:latest

#docker pull mogoDB from hub.docker.com
docker pull mongo:latest

#list available networks
docker network ls

#inspect network
docker network inspect bridge

#attaching existing running container
docker attach alpine

#create network
docker network create --driver bridge alpine-net

#connect to particular network
docker network connect bridge alpine4

#remove the network created
docker network rm alpine-net

#docker load an image or repository from a tar archive
docker images
docker tag 94e814e2efa8 parinay/ubuntu:firstTry
#create a tar from single image
docker save parinay/ubuntu:firstTry > firstTry.tar
docker load --input firstTry.tar
docker images

#create a tar from multiple container images
docker save parinay/ubuntu parinay/doweb > firstTry.tar.gz
docker load --input firstTry.tar.gz
Loaded image: parinay/ubuntu:firstTry
Loaded image: parinay/doweb:latest

#Purging All Unused or Dangling Images, Containers, Volumes, and Networks
#images, containers, volumes, and networks — that are dangling (not associated with a container)
#
docker system prune
#remove any stopped containers and all unused images (not just dangling images)
docker system prune -a
#Remove images
docker images purge

#Remove all the images
#List all images
docker images -a

#Dangling images are layers that have no relationship to any tagged images.
#List all dangling images
docker images -f dangling=true
docker rmi $(docker images -a -q)
docker rm $(docker ps -aq)
